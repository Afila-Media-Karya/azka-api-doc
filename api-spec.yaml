openapi: 3.0.3
info:
  title: Azka API Documentation
  description: |
    API documentation for Azka project
    
    This API provides endpoints for :
    - Employee authentication and register
    - Employee 
    - Profile management
    
    ## Authentication
    Most endpoints require Bearer token authentication.
  version: 1.0.0
  contact:
    name: Afila Dev Team
    email: info.rahmathidayat@gmail.com
    url: https://afila.co.id
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.azka.com/api/v1
    description: Production server
  - url: https://staging-api.azka.com/api/v1
    description: Staging server
  - url: http://localhost:port/api/v1
    description: Local development server

paths:
  # Authentication Endpoints
  /login:
    post:
      tags:
        - Authentication
      summary: Employee login
      description: Authenticate user with email and password
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              valid_login:
                summary: Valid login credentials
                value:
                  email: "aasoo@afila.co.id"
                  password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  summary: Successful login
                  value:
                    success: true
                    message: "Success Login"
                    data:
                      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                      refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                      ttl: 123
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid email or password
                  value:
                    success: false
                    error:
                      code: "INVALID_CREDENTIALS"
                      message: "Invalid email or password"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
  # Register - Check Company
  /employee/check-company:
    post:
      tags:
        - Employee
      summary: Check Company by Unique Code in Register Employee Process
      description: >
        This endpoint is used to check if a company with the provided unique code exists in the system.
        It is typically invoked during the registration process to verify the company's existence.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckCompanyRequest'
            examples:
              valid_company_code:
                summary: Valid company code
                value:
                  company_code: "REFAW213"
              invalid_company_code:
                summary: Invalid company code
                value:
                  company_code: "INVALID1"
      responses:
        '200':
          description: Company check successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckCompanyResponse'
              examples:
                success:
                  summary: Company found
                  value:
                    success: true
                    message: "Success"
                    data:
                      company_image_url: "https://example.com/company/logo.png"
                      company_name: "PT AFI LAH"
                      company_category_business: "Technology"
        '404':
          description: Company not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                not_found:
                  summary: Company not found
                  value:
                    success: false
                    error:
                      code: "COMPANY_NOT_FOUND"
                      message: "Company with the provided code not found"
  
  # Register - Employee Register
  /employee/register:
    post:
      tags:
        - Employee
      summary: Register new employee
      description: Register a new employee with company information and personal details
      operationId: registerEmployee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeRegisterRequest'
            examples:
              valid_registration:
                summary: Valid employee registration
                value:
                  company_departemen: "RnD"
                  company_position: "UI UX Designer"
                  company_code: "REFAW213"
                  name: "John Doe"
                  birth_place: "Makassar"
                  birth_date: "11/2/1998"
                  phone: "+62812345678"
                  email: "john.doe@example.com"
                  password: "password123"
                  password_confirmation: "password123"
      responses:
        '200':
          description: Employee registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeRegisterResponse'
              examples:
                success:
                  summary: Successful registration
                  value:
                    success: true
                    message: "Success Register, Please Check Your Email"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
              examples:
                validation_error:
                  summary: Validation failed
                  value:
                    success: false
                    error:
                      code: "VALIDATION_ERROR"
                      message: "The given data was invalid"
                      details:
                        email: ["The email field is required."]
                        password: ["The password must be at least 8 characters."]
        '409':
          description: Employee already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                already_exists:
                  summary: Employee already registered
                  value:
                    success: false
                    error:
                      code: "EMPLOYEE_EXISTS"
                      message: "Employee with this email already exists"
  
  # Employee Endpoints
  /employee:
    get:
      tags:
        - Employee
      summary: Get current employee information
      description: Retrieve the current employee's detailed information
      operationId: getCurrentEmployee
      parameters:
        - name: token
          in: query
          description: Authentication token
          required: true
          schema:
            type: string
            example: "fdasjkhfkajdhfa"
      responses:
        '200':
          description: Employee information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
              examples:
                success:
                  summary: Successful employee data retrieval
                  value:
                    success: true
                    message: "Success"
                    data:
                      id: "1"
                      name: "John Doe"
                      email: "john.doe@afila.co.id"
                      phone: "+62812345678"
                      position_id: "pos_001"
                      position_name: "Software Engineer"
                      departemen_id: "dept_001"
                      departemen_name: "IT Department"
                      profile_image_url: "https://example.com/profile/john.jpg"
                      company_name: "Afila Technology"
                      created_at: "2023-01-15T08:30:00Z"
                      updated_at: "2023-12-01T10:15:00Z"
        '401':
          description: Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_token:
                  summary: Invalid token
                  value:
                    success: false
                    error:
                      code: "INVALID_TOKEN"
                      message: "Invalid or expired token"
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                not_found:
                  summary: Employee not found
                  value:
                    success: false
                    error:
                      code: "EMPLOYEE_NOT_FOUND"
                      message: "Employee information not found"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  # Announcements Endpoints
  /announcements:
    get:
      tags:
        - Announcements
      summary: Get announcements with pagination
      description: Retrieve announcements with pagination and filtering options
      operationId: getAnnouncements
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          description: Bearer token for authentication
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
      responses:
        '200':
          description: Announcements retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementsResponse'
              examples:
                success:
                  summary: Successful announcements retrieval
                  value:
                    success: true
                    message: "Success"
                    data:
                      - id: "1"
                        title: "Company Meeting"
                        category: "General"
                        view_start_date: "2023-12-01T08:00:00Z"
                        view_end_date: "2023-12-31T23:59:59Z"
                        image_url: "https://example.com/announcements/meeting.jpg"
                        content: "Monthly company meeting will be held on December 15th."
                      - id: "2"
                        title: "Holiday Notice"
                        category: "HR"
                        view_start_date: "2023-12-20T00:00:00Z"
                        view_end_date: "2024-01-02T23:59:59Z"
                        image_url: "https://example.com/announcements/holiday.jpg"
                        content: "Office will be closed from December 25th to January 1st."
                    pagination:
                      current_page: 1
                      per_page: 10
                      total: 25
                      total_pages: 3
                      has_next_page: true
                      has_prev_page: false
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

    post:
      tags:
        - Announcements
      summary: Create new announcement
      description: Create a new announcement with specified details and target audience
      operationId: createAnnouncement
      security:
        - bearerAuth: []
      parameters:
        - name: Authorization
          in: header
          description: Bearer token for authentication
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAnnouncementRequest'
            examples:
              valid_announcement:
                summary: Valid announcement creation
                value:
                  token: "fdasjkhfkajdhfa"
                  title: "New Company Policy"
                  category: "HR"
                  view_start_date: "2023-12-01T08:00:00Z"
                  view_end_date: "2023-12-31T23:59:59Z"
                  image_url: "https://example.com/announcements/policy.jpg"
                  content: "Please review the updated company policy document."
                  target_audience: "1231,12312,12312,12312"
      responses:
        '201':
          description: Announcement created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAnnouncementResponse'
              examples:
                success:
                  summary: Successful announcement creation
                  value:
                    success: true
                    message: "Announcement created successfully"
                    data: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
              examples:
                validation_error:
                  summary: Validation failed
                  value:
                    success: false
                    error:
                      code: "VALIDATION_ERROR"
                      message: "The given data was invalid"
                      details:
                        title: ["The title field is required."]
                        category: ["The category field is required."]
                        view_start_date: ["The view start date field is required."]

  /announcements/{id}:
    put:
      tags:
        - Announcements
      summary: Update announcement
      description: Update an existing announcement with new details
      operationId: updateAnnouncement
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Announcement ID to update
          required: true
          schema:
            type: integer
            example: 123
        - name: Authorization
          in: header
          description: Bearer token for authentication
          required: true
          schema:
            type: string
            example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAnnouncementRequest'
            examples:
              valid_update:
                summary: Valid announcement update
                value:
                  token: "fdasjkhfkajdhfa"
                  title: "Updated Company Policy"
                  category: "HR"
                  view_start_date: "2023-12-01T08:00:00Z"
                  view_end_date: "2023-12-31T23:59:59Z"
                  image_url: "https://example.com/announcements/updated-policy.jpg"
                  content: "Please review the updated company policy document with new changes."
                  target_audience: "1231,12312,12312,12312"
      responses:
        '200':
          description: Announcement updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAnnouncementResponse'
              examples:
                success:
                  summary: Successful announcement update
                  value:
                    success: true
                    message: "Announcement updated successfully"
                    data: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Announcement not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                not_found:
                  summary: Announcement not found
                  value:
                    success: false
                    error:
                      code: "NOT_FOUND"
                      message: "Announcement not found"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
              examples:
                validation_error:
                  summary: Validation failed
                  value:
                    success: false
                    error:
                      code: "VALIDATION_ERROR"
                      message: "The given data was invalid"
                      details:
                        title: ["The title field is required."]
                        category: ["The category field is required."]

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    # Request Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 6
          description: User's password
          example: "password123"

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        total_pages:
          type: integer
          example: 10
        has_next_page:
          type: boolean
          example: true
        has_prev_page:
          type: boolean
          example: false

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              example: "INVALID_CREDENTIALS"
            message:
              type: string
              description: Human-readable error message
              example: "Invalid email or password"
            details:
              type: object
              description: Additional error details
              nullable: true

    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "The given data was invalid"
            details:
              type: object
              description: Field-specific validation errors
              additionalProperties:
                type: array
                items:
                  type: string
              example:
                email: ["The email field is required."]
                password: ["The password must be at least 8 characters."]

  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            unauthorized:
              summary: Missing or invalid token
              value:
                success: false
                error:
                  code: "UNAUTHORIZED"
                  message: "Authentication required"

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            forbidden:
              summary: Insufficient permissions
              value:
                success: false
                error:
                  code: "FORBIDDEN"
                  message: "Insufficient permissions to access this resource"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            not_found:
              summary: Resource not found
              value:
                success: false
                error:
                  code: "NOT_FOUND"
                  message: "The requested resource was not found"
    Employee:
      type: object
      properties:
        id:
          type: string
          nullable: true
          description: Employee's unique identifier
          example: "1"
        name:
          type: string
          nullable: true
          description: Employee's full name
          example: "John Doe"
        email:
          type: string
          nullable: true
          format: email
          description: Employee's email address
          example: "john.doe@afila.co.id"
        phone:
          type: string
          nullable: true
          description: Employee's phone number
          example: "+62812345678"
        position_id:
          type: string
          nullable: true
          description: Employee's position ID
          example: "pos_001"
        position_name:
          type: string
          nullable: true
          description: Employee's position name
          example: "Software Engineer"
        departemen_id:
          type: string
          nullable: true
          description: Employee's department ID
          example: "dept_001"
        departemen_name:
          type: string
          nullable: true
          description: Employee's department name
          example: "IT Department"
        profile_image_url:
          type: string
          nullable: true
          description: URL to employee's profile image
          example: "https://example.com/profile/john.jpg"
        company_name:
          type: string
          nullable: true
          description: Company name
          example: "Afila Technology"
        created_at:
          type: string
          format: date-time
          nullable: true
          description: Account creation timestamp
          example: "2023-01-15T08:30:00Z"
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: Last update timestamp
          example: "2023-12-01T10:15:00Z"

    EmployeeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Success"
        data:
          $ref: '#/components/schemas/Employee'

    CheckCompanyRequest:
      type: object
      required:
        - company_code
      properties:
        company_code:
          type: string
          minLength: 8
          maxLength: 8
          description: Unique 8-character company code
          example: "REFAW213"
          pattern: "^[A-Z0-9]{8}$"

    CheckCompanyResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Success"
        data:
          type: object
          properties:
            company_image_url:
              type: string
              nullable: true
              description: URL to company logo/image
              example: "https://example.com/company/logo.png"
            company_name:
              type: string
              nullable: true
              description: Company name
              example: "PT AFI LAH"
            company_category_business:
              type: string
              nullable: true
              description: Company business category
              example: "Technology"

    EmployeeRegisterRequest:
      type: object
      required:
        - company_code
        - name
        - phone
        - email
        - password
        - password_confirmation
      properties:
        company_departemen:
          type: string
          nullable: true
          description: Company department
          example: "RnD"
        company_position:
          type: string
          nullable: true
          description: Company position
          example: "UI UX Designer"
        company_code:
          type: string
          description: Company unique code (required)
          example: "REFAW213"
        name:
          type: string
          description: Employee full name (required)
          example: "John Doe"
        birth_place:
          type: string
          nullable: true
          description: Place of birth
          example: "Makassar"
        birth_date:
          type: string
          nullable: true
          description: Date of birth (MM/DD/YYYY format)
          example: "11/2/1998"
        phone:
          type: string
          description: Phone number (required)
          example: "+62812345678"
        email:
          type: string
          format: email
          description: Email address (required)
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          minLength: 6
          description: Password (required)
          example: "password123"
        password_confirmation:
          type: string
          format: password
          description: Password confirmation (required)
          example: "password123"

    EmployeeRegisterResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Success Register, Please Check Your Email"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Success Login"
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT access token
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            refresh_token:
              type: string
              description: JWT refresh token
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            ttl:
              type: integer
              description: Token time to live in seconds
              example: 123

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Employee
    description: Employee information and management
  - name: Announcements
    description: Company announcements and news

    CreateAnnouncementRequest:
      type: object
      required:
        - title
        - category
        - view_start_date
        - view_end_date
        - content
        - target_audience
      properties:
        token:
          type: string
          description: Authorization token
          example: "fdasjkhfkajdhfa"
        title:
          type: string
          nullable: true
          description: Announcement title (required)
          example: "New Company Policy"
        category:
          type: string
          nullable: true
          description: Announcement category (required)
          example: "HR"
        view_start_date:
          type: string
          format: date-time
          nullable: true
          description: Start date when announcement becomes visible (required)
          example: "2023-12-01T08:00:00Z"
        view_end_date:
          type: string
          format: date-time
          nullable: true
          description: End date when announcement stops being visible (required)
          example: "2023-12-31T23:59:59Z"
        image_url:
          type: string
          nullable: true
          description: URL to announcement image (optional)
          example: "https://example.com/announcements/policy.jpg"
        content:
          type: string
          nullable: true
          description: Announcement content/description (required)
          example: "Please review the updated company policy document."
        target_audience:
          type: string
          description: Comma-separated position IDs for target audience (required)
          example: "1231,12312,12312,12312"

    CreateAnnouncementResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Announcement created successfully"
        data:
          type: object
          example: {}

    UpdateAnnouncementRequest:
      type: object
      required:
        - title
        - category
        - view_start_date
        - view_end_date
        - content
        - target_audience
      properties:
        token:
          type: string
          description: Authorization token
          example: "fdasjkhfkajdhfa"
        title:
          type: string
          nullable: true
          description: Announcement title (required)
          example: "Updated Company Policy"
        category:
          type: string
          nullable: true
          description: Announcement category (required)
          example: "HR"
        view_start_date:
          type: string
          format: date-time
          nullable: true
          description: Start date when announcement becomes visible (required)
          example: "2023-12-01T08:00:00Z"
        view_end_date:
          type: string
          format: date-time
          nullable: true
          description: End date when announcement stops being visible (required)
          example: "2023-12-31T23:59:59Z"
        image_url:
          type: string
          nullable: true
          description: URL to announcement image (optional)
          example: "https://example.com/announcements/updated-policy.jpg"
        content:
          type: string
          nullable: true
          description: Announcement content/description (required)
          example: "Please review the updated company policy document with new changes."
        target_audience:
          type: string
          description: Comma-separated position IDs for target audience (required)
          example: "1231,12312,12312,12312"

    UpdateAnnouncementResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Announcement updated successfully"
        data:
          type: object
          example: {}