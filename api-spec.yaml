openapi: 3.0.3
info:
  title: Azka API Documentation
  description: |
    API documentation for Azka project
    
    This API provides endpoints for :
    - Employee authentication and register
    - Employee 
    - Profile management
    
    ## Authentication
    Most endpoints require Bearer token authentication.
  version: 1.0.0
  contact:
    name: Afila Dev Team
    email: info.rahmathidayat@gmail.com
    url: https://afila.co.id
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.azka.com/api/v1
    description: Production server
  - url: https://staging-api.azka.com/api/v1
    description: Staging server
  - url: http://localhost:port/api/v1
    description: Local development server

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              valid_login:
                summary: Valid login credentials
                value:
                  email: "user@example.com"
                  password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  summary: Successful login
                  value:
                    success: true
                    data:
                      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                      user:
                        id: 1
                        email: "user@example.com"
                        name: "John Doe"
                        role: "user"
                    message: "Login successful"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid email or password
                  value:
                    success: false
                    error:
                      code: "INVALID_CREDENTIALS"
                      message: "Invalid email or password"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Register a new user account
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              new_user:
                summary: New user registration
                value:
                  name: "Jane Smith"
                  email: "jane@example.com"
                  password: "securePassword123"
                  password_confirmation: "securePassword123"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  # User Management Endpoints
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a paginated list of users
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          description: Search term for filtering users
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user (admin only)
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Users
      summary: Update user
      description: Update user information
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user (admin only)
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Profile Endpoints
  /profile:
    get:
      tags:
        - Profile
      summary: Get current user profile
      description: Retrieve the authenticated user's profile
      operationId: getCurrentUserProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    put:
      tags:
        - Profile
      summary: Update current user profile
      description: Update the authenticated user's profile
      operationId: updateCurrentUserProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    # Request Schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 6
          description: User's password
          example: "password123"

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - password_confirmation
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john@example.com"
        password:
          type: string
          format: password
          minLength: 8
          description: User's password
          example: "securePassword123"
        password_confirmation:
          type: string
          format: password
          description: Password confirmation
          example: "securePassword123"

    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
        - role
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          minLength: 8
          description: User's password
        role:
          type: string
          enum: ["user", "admin", "moderator"]
          description: User's role
          default: "user"

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        role:
          type: string
          enum: ["user", "admin", "moderator"]
          description: User's role
        is_active:
          type: boolean
          description: Whether the user account is active

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        current_password:
          type: string
          format: password
          description: Current password (required when changing password)
        new_password:
          type: string
          format: password
          minLength: 8
          description: New password
        new_password_confirmation:
          type: string
          format: password
          description: New password confirmation

    # Response Schemas
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User's unique identifier
          example: 1
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User's email address
          example: "john@example.com"
        role:
          type: string
          enum: ["user", "admin", "moderator"]
          description: User's role
          example: "user"
        is_active:
          type: boolean
          description: Whether the user account is active
          example: true
        email_verified_at:
          type: string
          format: date-time
          nullable: true
          description: Email verification timestamp
          example: "2023-12-01T10:30:00Z"
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2023-11-01T09:15:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-12-01T10:30:00Z"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            token:
              type: string
              description: JWT authentication token
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            user:
              $ref: '#/components/schemas/User'
        message:
          type: string
          example: "Login successful"

    RegisterResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
        message:
          type: string
          example: "User registered successfully"

    UserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
        message:
          type: string
          example: "User retrieved successfully"

    UsersListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            pagination:
              $ref: '#/components/schemas/Pagination'
        message:
          type: string
          example: "Users retrieved successfully"

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 10
        total:
          type: integer
          example: 100
        total_pages:
          type: integer
          example: 10
        has_next_page:
          type: boolean
          example: true
        has_prev_page:
          type: boolean
          example: false

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              example: "INVALID_CREDENTIALS"
            message:
              type: string
              description: Human-readable error message
              example: "Invalid email or password"
            details:
              type: object
              description: Additional error details
              nullable: true

    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "The given data was invalid"
            details:
              type: object
              description: Field-specific validation errors
              additionalProperties:
                type: array
                items:
                  type: string
              example:
                email: ["The email field is required."]
                password: ["The password must be at least 8 characters."]

  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            unauthorized:
              summary: Missing or invalid token
              value:
                success: false
                error:
                  code: "UNAUTHORIZED"
                  message: "Authentication required"

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            forbidden:
              summary: Insufficient permissions
              value:
                success: false
                error:
                  code: "FORBIDDEN"
                  message: "Insufficient permissions to access this resource"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            not_found:
              summary: Resource not found
              value:
                success: false
                error:
                  code: "NOT_FOUND"
                  message: "The requested resource was not found"

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
  - name: Profile
    description: User profile management