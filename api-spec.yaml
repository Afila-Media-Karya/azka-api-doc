openapi: 3.0.3
info:
  title: Azka API Documentation
  description: |
    API documentation for Azka project
    
    This API provides endpoints for:
    - Employee authentication and registration
    - Employee management
    - Profile management
    - Company announcements
    
    ## Authentication
    Most endpoints require Bearer token authentication using JWT tokens.
    
    ## Rate Limiting
    API requests are rate limited to ensure fair usage.
    
    ## Error Handling
    All errors follow a consistent format with appropriate HTTP status codes.
  version: 1.0.0
  contact:
    name: Afila Dev Team
    email: info.rahmathidayat@gmail.com
    url: https://afila.co.id
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.azka.com/api/v1
    description: Production server
  - url: https://staging-api.azka.com/api/v1
    description: Staging server
  - url: http://localhost:8080/api/v1
    description: Local development server

tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Employee
    description: Employee information and management endpoints
  - name: Announcements
    description: Company announcements and news management

paths:
  # Authentication Endpoints
  /login:
    post:
      tags:
        - Authentication
      summary: Employee login
      description: Authenticate user with email and password to receive JWT tokens
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              valid_login:
                summary: Valid login credentials
                value:
                  email: "aasoo@afila.co.id"
                  password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  summary: Successful login
                  value:
                    success: true
                    message: "Success Login"
                    data:
                      token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                      refresh_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                      ttl: 3600
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Employee Registration Flow
  /employee/check-company:
    post:
      tags:
        - Employee
      summary: Check company by unique code
      description: >
        Verify if a company with the provided unique code exists in the system.
        This endpoint is typically used during the employee registration process.
      operationId: checkCompany
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckCompanyRequest'
            examples:
              valid_company_code:
                summary: Valid company code
                value:
                  company_code: "REFAW213"
              invalid_company_code:
                summary: Invalid company code
                value:
                  company_code: "INVALID1"
      responses:
        '200':
          description: Company check successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckCompanyResponse'
              examples:
                success:
                  summary: Company found
                  value:
                    success: true
                    message: "Success"
                    data:
                      company_image_url: "https://example.com/company/logo.png"
                      company_name: "PT AFI LAH"
                      company_category_business: "Technology"
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /employee/register:
    post:
      tags:
        - Employee
      summary: Register new employee
      description: Register a new employee with company information and personal details
      operationId: registerEmployee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeRegisterRequest'
            examples:
              valid_registration:
                summary: Valid employee registration
                value:
                  company_departemen: "RnD"
                  company_position: "UI UX Designer"
                  company_code: "REFAW213"
                  name: "John Doe"
                  birth_place: "Makassar"
                  birth_date: "1998-02-11"
                  phone: "+62812345678"
                  email: "john.doe@example.com"
                  password: "password123"
                  password_confirmation: "password123"
      responses:
        '201':
          description: Employee registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeRegisterResponse'
              examples:
                success:
                  summary: Successful registration
                  value:
                    success: true
                    message: "Success Register, Please Check Your Email"
        '409':
          description: Employee already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                already_exists:
                  summary: Employee already registered
                  value:
                    success: false
                    error:
                      code: "EMPLOYEE_EXISTS"
                      message: "Employee with this email already exists"
        '422':
          $ref: '#/components/responses/ValidationError'

  # Employee Information
  /employee:
    get:
      tags:
        - Employee
      summary: Get current employee information
      description: Retrieve the current authenticated employee's detailed information
      operationId: getCurrentEmployee
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Employee information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeResponse'
              examples:
                success:
                  summary: Successful employee data retrieval
                  value:
                    success: true
                    message: "Success"
                    data:
                      id: "1"
                      name: "John Doe"
                      email: "john.doe@afila.co.id"
                      phone: "+62812345678"
                      position_id: "pos_001"
                      position_name: "Software Engineer"
                      departemen_id: "dept_001"
                      departemen_name: "IT Department"
                      profile_image_url: "https://example.com/profile/john.jpg"
                      company_name: "Afila Technology"
                      created_at: "2023-01-15T08:30:00Z"
                      updated_at: "2023-12-01T10:15:00Z"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  # Announcements Management
  /announcements:
    get:
      tags:
        - Announcements
      summary: Get announcements with pagination
      description: Retrieve announcements with pagination and filtering options
      operationId: getAnnouncements
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
        - name: category
          in: query
          description: Filter by announcement category
          required: false
          schema:
            type: string
            example: "HR"
      responses:
        '200':
          description: Announcements retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnouncementsResponse'
              examples:
                success:
                  summary: Successful announcements retrieval
                  value:
                    success: true
                    message: "Success"
                    data:
                      - id: "1"
                        title: "Company Meeting"
                        category: "General"
                        view_start_date: "2023-12-01T08:00:00Z"
                        view_end_date: "2023-12-31T23:59:59Z"
                        image_url: "https://example.com/announcements/meeting.jpg"
                        content: "Monthly company meeting will be held on December 15th."
                      - id: "2"
                        title: "Holiday Notice"
                        category: "HR"
                        view_start_date: "2023-12-20T00:00:00Z"
                        view_end_date: "2024-01-02T23:59:59Z"
                        image_url: "https://example.com/announcements/holiday.jpg"
                        content: "Office will be closed from December 25th to January 1st."
                    pagination:
                      current_page: 1
                      per_page: 10
                      total: 25
                      total_pages: 3
                      has_next_page: true
                      has_prev_page: false
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

    post:
      tags:
        - Announcements
      summary: Create new announcement
      description: Create a new announcement with specified details and target audience
      operationId: createAnnouncement
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAnnouncementRequest'
            examples:
              valid_announcement:
                summary: Valid announcement creation
                value:
                  title: "New Company Policy"
                  category: "HR"
                  view_start_date: "2023-12-01T08:00:00Z"
                  view_end_date: "2023-12-31T23:59:59Z"
                  image_url: "https://example.com/announcements/policy.jpg"
                  content: "Please review the updated company policy document."
                  target_audience: "1231,12312,12312,12312"
      responses:
        '201':
          description: Announcement created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAnnouncementResponse'
              examples:
                success:
                  summary: Successful announcement creation
                  value:
                    success: true
                    message: "Announcement created successfully"
                    data:
                      id: "123"
                      created_at: "2023-12-01T08:00:00Z"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /announcements/{id}:
    put:
      tags:
        - Announcements
      summary: Update announcement
      description: Update an existing announcement with new details
      operationId: updateAnnouncement
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Announcement ID to update
          required: true
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAnnouncementRequest'
            examples:
              valid_update:
                summary: Valid announcement update
                value:
                  title: "Updated Company Policy"
                  category: "HR"
                  view_start_date: "2023-12-01T08:00:00Z"
                  view_end_date: "2023-12-31T23:59:59Z"
                  image_url: "https://example.com/announcements/updated-policy.jpg"
                  content: "Please review the updated company policy document with new changes."
                  target_audience: "1231,12312,12312,12312"
      responses:
        '200':
          description: Announcement updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAnnouncementResponse'
              examples:
                success:
                  summary: Successful announcement update
                  value:
                    success: true
                    message: "Announcement updated successfully"
                    data:
                      id: "123"
                      updated_at: "2023-12-01T10:30:00Z"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      tags:
        - Announcements
      summary: Delete announcement
      description: Delete an existing announcement by ID
      operationId: deleteAnnouncement
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Announcement ID to delete
          required: true
          schema:
            type: string
            format: uuid
            example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '204':
          description: Announcement deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication. Include 'Bearer ' prefix.

  schemas:
    # Base Response Schemas
    BaseResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates if the request was successful
        message:
          type: string
          description: Human-readable message
      required:
        - success
        - message

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [false]
            error:
              type: object
              properties:
                code:
                  type: string
                  description: Error code for programmatic handling
                  example: "INVALID_CREDENTIALS"
                message:
                  type: string
                  description: Human-readable error message
                  example: "Invalid email or password"
                details:
                  type: object
                  description: Additional error details
                  additionalProperties: true
              required:
                - code
                - message
          required:
            - error

    ValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [false]
            error:
              type: object
              properties:
                code:
                  type: string
                  enum: ["VALIDATION_ERROR"]
                message:
                  type: string
                  example: "The given data was invalid"
                details:
                  type: object
                  description: Field-specific validation errors
                  additionalProperties:
                    type: array
                    items:
                      type: string
                  example:
                    email: ["The email field is required."]
                    password: ["The password must be at least 8 characters."]
              required:
                - code
                - message
                - details
          required:
            - error

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          minimum: 1
          description: Current page number
          example: 1
        per_page:
          type: integer
          minimum: 1
          description: Number of items per page
          example: 10
        total:
          type: integer
          minimum: 0
          description: Total number of items
          example: 100
        total_pages:
          type: integer
          minimum: 0
          description: Total number of pages
          example: 10
        has_next_page:
          type: boolean
          description: Whether there is a next page
          example: true
        has_prev_page:
          type: boolean
          description: Whether there is a previous page
          example: false
      required:
        - current_page
        - per_page
        - total
        - total_pages
        - has_next_page
        - has_prev_page

    # Authentication Schemas
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 6
          description: User's password
          example: "password123"
      required:
        - email
        - password

    LoginResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            data:
              type: object
              properties:
                token:
                  type: string
                  description: JWT access token
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                refresh_token:
                  type: string
                  description: JWT refresh token
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                ttl:
                  type: integer
                  description: Token time to live in seconds
                  example: 3600
              required:
                - token
                - refresh_token
                - ttl
          required:
            - data

    # Employee Schemas
    Employee:
      type: object
      properties:
        id:
          type: string
          description: Employee's unique identifier
          example: "1"
        name:
          type: string
          description: Employee's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: Employee's email address
          example: "john.doe@afila.co.id"
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Employee's phone number in E.164 format
          example: "+62812345678"
        position_id:
          type: string
          description: Employee's position ID
          example: "pos_001"
        position_name:
          type: string
          description: Employee's position name
          example: "Software Engineer"
        departemen_id:
          type: string
          description: Employee's department ID
          example: "dept_001"
        departemen_name:
          type: string
          description: Employee's department name
          example: "IT Department"
        profile_image_url:
          type: string
          format: uri
          description: URL to employee's profile image
          example: "https://example.com/profile/john.jpg"
        company_name:
          type: string
          description: Company name
          example: "Afila Technology"
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2023-01-15T08:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-12-01T10:15:00Z"

    EmployeeResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            data:
              $ref: '#/components/schemas/Employee'
          required:
            - data

    CheckCompanyRequest:
      type: object
      properties:
        company_code:
          type: string
          minLength: 8
          maxLength: 8
          pattern: '^[A-Z0-9]{8}$'
          description: Unique 8-character company code (alphanumeric, uppercase)
          example: "REFAW213"
      required:
        - company_code

    CheckCompanyResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            data:
              type: object
              properties:
                company_image_url:
                  type: string
                  format: uri
                  description: URL to company logo/image
                  example: "https://example.com/company/logo.png"
                company_name:
                  type: string
                  description: Company name
                  example: "PT AFI LAH"
                company_category_business:
                  type: string
                  description: Company business category
                  example: "Technology"
              required:
                - company_name
                - company_category_business
          required:
            - data

    EmployeeRegisterRequest:
      type: object
      properties:
        company_departemen:
          type: string
          description: Company department
          example: "RnD"
        company_position:
          type: string
          description: Company position
          example: "UI UX Designer"
        company_code:
          type: string
          minLength: 8
          maxLength: 8
          pattern: '^[A-Z0-9]{8}$'
          description: Company unique code
          example: "REFAW213"
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: Employee full name
          example: "John Doe"
        birth_place:
          type: string
          description: Place of birth
          example: "Makassar"
        birth_date:
          type: string
          format: date
          description: Date of birth in YYYY-MM-DD format
          example: "1998-02-11"
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: Phone number in E.164 format
          example: "+62812345678"
        email:
          type: string
          format: email
          description: Email address
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          minLength: 8
          description: Password (minimum 8 characters)
          example: "password123"
        password_confirmation:
          type: string
          format: password
          description: Password confirmation (must match password)
          example: "password123"
      required:
        - company_code
        - name
        - phone
        - email
        - password
        - password_confirmation

    EmployeeRegisterResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              example: "Success Register, Please Check Your Email"

    # Announcement Schemas
    Announcement:
      type: object
      properties:
        id:
          type: string
          description: Announcement unique identifier
          example: "1"
        title:
          type: string
          description: Announcement title
          example: "Company Meeting"
        category:
          type: string
          description: Announcement category
          example: "General"
        view_start_date:
          type: string
          format: date-time
          description: Start date when announcement becomes visible
          example: "2023-12-01T08:00:00Z"
        view_end_date:
          type: string
          format: date-time
          description: End date when announcement stops being visible
          example: "2023-12-31T23:59:59Z"
        image_url:
          type: string
          format: uri
          description: URL to announcement image
          example: "https://example.com/announcements/meeting.jpg"
        content:
          type: string
          description: Announcement content/description
          example: "Monthly company meeting will be held on December 15th."
      required:
        - id
        - title
        - category
        - view_start_date
        - view_end_date
        - content

    AnnouncementsResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            data:
              type: array
              items:
                $ref: '#/components/schemas/Announcement'
            pagination:
              $ref: '#/components/schemas/Pagination'
          required:
            - data
            - pagination

    CreateAnnouncementRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Announcement title
          example: "New Company Policy"
        category:
          type: string
          minLength: 1
          maxLength: 50
          description: Announcement category
          example: "HR"
        view_start_date:
          type: string
          format: date-time
          description: Start date when announcement becomes visible
          example: "2023-12-01T08:00:00Z"
        view_end_date:
          type: string
          format: date-time
          description: End date when announcement stops being visible
          example: "2023-12-31T23:59:59Z"
        image_url:
          type: string
          format: uri
          description: URL to announcement image
          example: "https://example.com/announcements/policy.jpg"
        content:
          type: string
          minLength: 1
          maxLength: 5000
          description: Announcement content/description
          example: "Please review the updated company policy document."
        target_audience:
          type: string
          pattern: '^\d+(,\d+)*$'
          description: Comma-separated position IDs for target audience
          example: "1231,12312,12312,12312"
      required:
        - title
        - category
        - view_start_date
        - view_end_date
        - content
        - target_audience

    CreateAnnouncementResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              example: "Announcement created successfully"
            data:
              type: object
              properties:
                id:
                  type: string
                  description: Created announcement ID
                  example: "123"
                created_at:
                  type: string
                  format: date-time
                  description: Creation timestamp
                  example: "2023-12-01T08:00:00Z"
              required:
                - id
                - created_at
          required:
            - data

    UpdateAnnouncementRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Announcement title
          example: "Updated Company Policy"
        category:
          type: string
          minLength: 1
          maxLength: 50
          description: Announcement category
          example: "HR"
        view_start_date:
          type: string
          format: date-time
          description: Start date when announcement becomes visible
          example: "2023-12-01T08:00:00Z"
        view_end_date:
          type: string
          format: date-time
          description: End date when announcement stops being visible
          example: "2023-12-31T23:59:59Z"
        image_url:
          type: string
          format: uri
          description: URL to announcement image
          example: "https://example.com/announcements/updated-policy.jpg"
        content:
          type: string
          minLength: 1
          maxLength: 5000
          description: Announcement content/description
          example: "Please review the updated company policy document with new changes."
        target_audience:
          type: string
          pattern: '^\d+(,\d+)*$'
          description: Comma-separated position IDs for target audience
          example: "1231,12312,12312,12312"
      required:
        - title
        - category
        - view_start_date
        - view_end_date
        - content
        - target_audience

    UpdateAnnouncementResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            success:
              type: boolean
              enum: [true]
            message:
              type: string
              example: "Announcement updated successfully"
            data:
              type: object
              properties:
                id:
                  type: string
                  description: Updated announcement ID
                  example: "123"
                updated_at:
                  type: string
                  format: date-time
                  description: Update timestamp
                  example: "2023-12-01T10:30:00Z"
              required:
                - id
                - updated_at
          required:
            - data

  responses:
    UnauthorizedError:
      description: Authentication required or token invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            unauthorized:
              summary: Missing or invalid token
              value:
                success: false
                error:
                  code: "UNAUTHORIZED"
                  message: "Authentication required"

    ForbiddenError:
      description: Insufficient permissions to access resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            forbidden:
              summary: Insufficient permissions
              value:
                success: false
                error:
                  code: "FORBIDDEN"
                  message: "Insufficient permissions to access this resource"

    NotFoundError:
      description: Requested resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            not_found:
              summary: Resource not found
              value:
                success: false
                error:
                  code: "NOT_FOUND"
                  message: "The requested resource was not found"

    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
          examples:
            validation_failed:
              summary: Validation errors
              value:
                success: false
                error:
                  code: "VALIDATION_ERROR"
                  message: "The given data was invalid"
                  details:
                    email: ["The email field is required."]
                    password: ["The password must be at least 8 characters."]